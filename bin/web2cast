#!/usr/bin/env node

const program = require('commander');
const pkg = require('../package.json');
const exec = require('child_process').exec;
const request = require('sync-request');

program
.version(pkg.version)
.option('-a, --api [string]', 'ip:port of the cast-web-api', false)
.option('-c, --chromecast [string]', 'the name of the target device', false)
.option('-u, --url [string]', 'the URL to cast', false)
.option('-t, --time [int]', 'interval in seconds to test if the Chromecast', 5)
.option('-b, --bin [string]', 'absolute path to catt binary', 'catt')
.parse(process.argv);

// Check chromecast
if (!program.api) {
    console.log('No cast-web-api provided. Please pass -a or --api <ip:port>');
    process.exit(1);
}

// Check chromecast
if (!program.chromecast) {
    console.log('No chromecast provided. Please pass -c or --chromecast <your-chromecast-name>');
    process.exit(1);
}

// Check url
if (!program.url) {
    console.log('No url provided. Please pass -u or --url <http://your.url>');
    process.exit(1);
}

// Make sure we int
program.time = parseInt(program.time) || 5;

let isIdle = function(deviceName) {

    let deviceList = false;
    try {
        deviceList = JSON.parse(request('GET', `http://${program.api}/device`).getBody('utf8'));
    } catch (e) {
        console.log('Failed fetching device list from cast-web-api');
        return false;
    }

    
    let idle = 'unknown';
    if (deviceList) {
        deviceList.forEach(function(device) {
            if (device.name === deviceName) {
                idle = device.status.application === 'Backdrop';
            }
        });

    }

    return idle;
};
/**
 * Check if we need to cast and cast
 */
let execute = function() {

    if (isIdle(program.chromecast) === true) {
        // Start cast, shoot and forget
        exec(`${program.bin} -d "${program.chromecast}" cast_site ${program.url}`, function() {
            executeTimeout();
        });
    } else {
        executeTimeout();
    }

};

/**
 *
 */
let executeTimeout = function() {

    setTimeout(function() {
        execute();
    }, 1e3 * program.time);

};

// Start the first check
execute();
